#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;

# Define the servers to check
my @servers = ('server1', 'server2', 'server3', 'server4', 'server5', 'server6', 'server7', 'server8', 'server9', 'server10');

# Part 1: Build job and stream reference database
sub build_job_reference {
    my $reference_file = "job_reference.txt";
    my %all_jobs;
    
    # Process logs from all servers
    foreach my $server (@servers) {
        my $log_file = "${server}_log.txt";
        
        open(my $log_fh, '<', $log_file) or warn "Cannot open $log_file: $!";
        
        while (my $line = <$log_fh>) {
            if ($line =~ /start of job (\S+) at/) {
                my $job_full_name = $1;
                
                # Extract base job name and stream if applicable
                my ($base_job, $stream);
                
                if ($job_full_name =~ /^(.+)_(\d+)$/) {
                    $base_job = $1;
                    $stream = $2;
                } else {
                    $base_job = $job_full_name;
                    $stream = '0'; # Default for jobs without streams
                }
                
                # Store the job and its stream
                $all_jobs{$base_job}{$stream} = 1;
            }
        }
        
        close($log_fh) if $log_fh;
    }
    
    # Write the reference file
    open(my $ref_fh, '>', $reference_file) or die "Cannot open $reference_file: $!";
    
    foreach my $job (sort keys %all_jobs) {
        my @streams = sort keys %{$all_jobs{$job}};
        
        # Skip the '0' stream if it's the only one and other streams exist
        @streams = grep { $_ ne '0' } @streams if scalar(@streams) > 1 && exists $all_jobs{$job}{'0'};
        
        print $ref_fh "$job:" . join(',', @streams) . "\n";
    }
    
    close($ref_fh);
    
    return \%all_jobs;
}

# Function to escape CSV fields properly
sub escape_csv_field {
    my $field = shift;
    # If the field contains commas, quotes, or newlines, wrap it in quotes and escape any existing quotes
    if ($field =~ /[,"\n\r]/) {
        $field =~ s/"/""/g;  # Double any quotes within the field
        return qq{"$field"};
    }
    return $field;
}

# Part 2: Check if all job streams have run and generate report
sub check_job_execution {
    my $reference_data = shift;
    my $output_file = "job_status_report.csv";
    
    # Initialize with job data from reference
    my %job_execution;
    foreach my $job (keys %$reference_data) {
        my @streams = keys %{$reference_data->{$job}};
        $job_execution{$job} = {
            expected_streams => [grep { $_ ne '0' } @streams],
            executed_streams => [],
            stream_servers => {}  # To track which server each stream ran on
        };
    }
    
    # Process today's logs from all servers
    foreach my $server (@servers) {
        my $log_file = "${server}_log.txt";
        
        open(my $log_fh, '<', $log_file) or warn "Cannot open $log_file: $!";
        
        while (my $line = <$log_fh>) {
            if ($line =~ /start of job (\S+) at/) {
                my $job_full_name = $1;
                
                # Extract base job name and stream if applicable
                my ($base_job, $stream);
                
                if ($job_full_name =~ /^(.+)_(\d+)$/) {
                    $base_job = $1;
                    $stream = $2;
                    
                    # Record this stream execution if the job exists in our reference
                    if (exists $job_execution{$base_job}) {
                        push @{$job_execution{$base_job}{executed_streams}}, $stream;
                        
                        # Store which server this stream ran on
                        $job_execution{$base_job}{stream_servers}{"${stream}"} = $server;
                    }
                }
                # For non-stream jobs, simply mark them as executed
                else {
                    $base_job = $job_full_name;
                    if (exists $job_execution{$base_job}) {
                        $job_execution{$base_job}{executed} = 1;
                        $job_execution{$base_job}{server} = $server;
                    }
                }
            }
        }
        
        close($log_fh) if $log_fh;
    }
    
    # Generate the CSV report manually
    open(my $csv_fh, '>', $output_file) or die "Cannot open $output_file: $!";
    
    # Write header
    print $csv_fh "Job,Status,Missing Streams,Executed Streams with Servers\n";
    
    foreach my $job (sort keys %job_execution) {
        my $status;
        my $missing_streams = "";
        my $executed_streams_with_servers = "";
        
        # Skip jobs without streams
        if (scalar(@{$job_execution{$job}{expected_streams}}) == 0) {
            $status = $job_execution{$job}{executed} ? "Yes" : "No";
            $executed_streams_with_servers = $job_execution{$job}{executed} ? 
                "${job} on " . $job_execution{$job}{server} : "";
        } 
        # Check stream jobs
        else {
            my %executed_hash;
            map { $executed_hash{$_} = 1 } @{$job_execution{$job}{executed_streams}};
            
            my @missing = grep { !exists $executed_hash{$_} } @{$job_execution{$job}{expected_streams}};
            
            if (@missing) {
                $status = "No";
                $missing_streams = join(',', @missing);
            } else {
                $status = "Yes";
            }
            
            # Build string of executed streams with their servers
            my @executed_stream_details;
            foreach my $stream (sort @{$job_execution{$job}{executed_streams}}) {
                my $server = $job_execution{$job}{stream_servers}{$stream} || "unknown";
                push @executed_stream_details, "${job}_${stream} on ${server}";
            }
            $executed_streams_with_servers = join('; ', @executed_stream_details);
        }
        
        # Properly escape fields for CSV
        my $job_escaped = escape_csv_field($job);
        my $status_escaped = escape_csv_field($status);
        my $missing_streams_escaped = escape_csv_field($missing_streams);
        my $executed_streams_escaped = escape_csv_field($executed_streams_with_servers);
        
        print $csv_fh "$job_escaped,$status_escaped,$missing_streams_escaped,$executed_streams_escaped\n";
    }
    
    close($csv_fh);
    print "Report generated: $output_file\n";
}

# Main program execution
my $load_existing_reference = 0;  # Set to 1 to skip rebuilding reference

my $job_reference;
if ($load_existing_reference && -e "job_reference.txt") {
    # Load existing reference file
    $job_reference = {};
    open(my $ref_fh, '<', "job_reference.txt") or die "Cannot open job_reference.txt: $!";
    
    while (my $line = <$ref_fh>) {
        chomp $line;
        my ($job, $streams_list) = split(/:/, $line);
        my @streams = split(/,/, $streams_list);
        
        foreach my $stream (@streams) {
            $job_reference->{$job}{$stream} = 1;
        }
    }
    
    close($ref_fh);
} else {
    # Build new reference
    print "Building job reference data...\n";
    $job_reference = build_job_reference();
}

# Check today's job execution
print "Checking job execution status...\n";
check_job_execution($job_reference);

print "Job monitoring completed.\n";