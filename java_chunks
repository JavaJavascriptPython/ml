import java.io.*;
import java.util.concurrent.*;
import java.util.zip.GZIPInputStream;

public class GzipChunkProcessor {
    private static final int NUM_THREADS = 12;
    private static final int CHUNK_SIZE = 1024 * 1024; // 1 MB per chunk
    private static final int QUEUE_CAPACITY = 5;

    private static final BlockingQueue<byte[]> queue = new LinkedBlockingQueue<>(QUEUE_CAPACITY);
    private static final ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);
    private static volatile boolean finished = false;

    public static void main(String[] args) throws Exception {
        String gzipFilePath = "path/to/your/file.gz";

        CyclicBarrier barrier = new CyclicBarrier(NUM_THREADS, () -> {
            try {
                // Remove chunk only after all threads are done
                queue.take();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        });

        // Start consumer threads
        for (int i = 0; i < NUM_THREADS; i++) {
            int threadId = i;
            executor.submit(() -> processChunks(threadId, barrier));
        }

        // Start producer
        readGzipFileChunks(gzipFilePath);

        finished = true;
        executor.shutdown();
        executor.awaitTermination(10, TimeUnit.MINUTES);
        System.out.println("All processing complete.");
    }

    // Producer: reads GZIP and fills queue with chunks
    private static void readGzipFileChunks(String filePath) {
        try (BufferedInputStream bis = new BufferedInputStream(new GZIPInputStream(new FileInputStream(filePath)))) {
            byte[] buffer = new byte[CHUNK_SIZE];
            int bytesRead;
            while ((bytesRead = bis.read(buffer)) != -1) {
                byte[] chunk = new byte[bytesRead];
                System.arraycopy(buffer, 0, chunk, 0, bytesRead);
                queue.put(chunk);
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    // Consumer: each thread processes every chunk
    private static void processChunks(int threadId, CyclicBarrier barrier) {
        try {
            while (!finished || !queue.isEmpty()) {
                byte[] chunk = queue.peek(); // peek so all threads get the same data
                if (chunk == null) {
                    Thread.sleep(10);
                    continue;
                }
                callFunctionById(threadId, chunk);
                barrier.await(); // wait for all threads to finish the chunk
            }
        } catch (InterruptedException | BrokenBarrierException e) {
            Thread.currentThread().interrupt();
        }
    }

    // Dummy function dispatcher
    private static void callFunctionById(int id, byte[] chunk) {
        // You can customize these functions
        switch (id) {
            case 0: processChunk0(chunk); break;
            case 1: processChunk1(chunk); break;
            case 2: processChunk2(chunk); break;
            // ...
            case 11: processChunk11(chunk); break;
        }
    }

    // Dummy functions for each thread
    private static void processChunk0(byte[] chunk) { /* logic here */ }
    private static void processChunk1(byte[] chunk) { /* logic here */ }
    private static void processChunk2(byte[] chunk) { /* logic here */ }
    private static void processChunk11(byte[] chunk) { /* logic here */ }
}







private static void processChunk0(byte[] chunk) {
    System.out.println("Thread 0 processed chunk of size: " + chunk.length);
}

private static void processChunk1(byte[] chunk) {
    int count = 0;
    for (byte b : chunk) {
        if (b == 'a') count++;
    }
    System.out.println("Thread 1 found 'a' " + count + " times");
}

private static void processChunk2(byte[] chunk) {
    int sum = 0;
    for (byte b : chunk) sum += b & 0xFF;
    System.out.println("Thread 2 calculated byte sum: " + sum);
}

private static void processChunk3(byte[] chunk) {
    System.out.println("Thread 3 processed: First byte is " + (chunk.length > 0 ? chunk[0] : "empty"));
}

private static void processChunk4(byte[] chunk) {
    System.out.println("Thread 4: sleeping for 10ms to simulate work...");
    try { Thread.sleep(10); } catch (InterruptedException ignored) {}
}

private static void processChunk5(byte[] chunk) {
    long count = chunk.length;
    System.out.println("Thread 5 counted " + count + " total bytes");
}

private static void processChunk6(byte[] chunk) {
    String hex = String.format("%02X", chunk[0]);
    System.out.println("Thread 6 first byte in hex: " + hex);
}

private static void processChunk7(byte[] chunk) {
    int lines = 0;
    for (byte b : chunk) if (b == '\n') lines++;
    System.out.println("Thread 7 counted " + lines + " newline characters");
}

private static void processChunk8(byte[] chunk) {
    int max = Byte.MIN_VALUE;
    for (byte b : chunk) if (b > max) max = b;
    System.out.println("Thread 8 max byte value: " + max);
}

private static void processChunk9(byte[] chunk) {
    String preview = new String(chunk, 0, Math.min(10, chunk.length));
    System.out.println("Thread 9 preview: " + preview);
}

private static void processChunk10(byte[] chunk) {
    boolean hasDigit = false;
    for (byte b : chunk) {
        if (b >= '0' && b <= '9') {
            hasDigit = true;
            break;
        }
    }
    System.out.println("Thread 10 found digit? " + hasDigit);
}

private static void processChunk11(byte[] chunk) {
    System.out.println("Thread 11 done processing chunk at " + System.currentTimeMillis());
}





private static void processChunk0(byte[] chunk) {
    List<Map<String, String>> extractedRecords = new ArrayList<>();

    try {
        String data = new String(chunk);
        String[] lines = data.split("\n");

        for (String line : lines) {
            if (line.length() < 33) continue; // skip invalid lines

            Map<String, String> record = new HashMap<>();
            record.put("id", line.substring(0, 12).trim());
            record.put("date", line.substring(12, 20).trim());
            record.put("currency", line.substring(20, 23).trim());
            record.put("amount", line.substring(23, 33).trim());

            extractedRecords.add(record);
        }

        // Print or process the extracted records
        System.out.println("Thread 0 extracted " + extractedRecords.size() + " records");
        // Optional: print one record for debugging
        if (!extractedRecords.isEmpty()) {
            System.out.println("Sample: " + extractedRecords.get(0));
        }
    } catch (Exception e) {
        System.err.println("Thread 0 error processing chunk: " + e.getMessage());
    }
}