import java.io.; import java.util.; import java.util.concurrent.*; import java.util.zip.GZIPInputStream;

public class TransactionProcessor {

static class TransactionWorker implements Runnable {
    private final BlockingQueue<String> queue;
    private final Map<String, Integer> resultMap = new HashMap<>();
    private final int workerId;

    public TransactionWorker(BlockingQueue<String> queue, int id) {
        this.queue = queue;
        this.workerId = id;
    }

    @Override
    public void run() {
        try {
            while (true) {
                String line = queue.take();
                if (line.equals("__EOF__")) break;
                processLine(line);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private void processLine(String line) {
        String txnCode = extractTxnCode(line);
        resultMap.merge(txnCode, 1, Integer::sum);
    }

    private String extractTxnCode(String line) {
        // Example: transaction code is in 3rd column
        String[] parts = line.split(",");
        return parts.length > 2 ? parts[2] : "UNKNOWN";
    }

    public Map<String, Integer> getResult() {
        return resultMap;
    }
}

public static void main(String[] args) throws Exception {
    int numWorkers = 12;
    BlockingQueue<String> queue = new ArrayBlockingQueue<>(10000);
    ExecutorService executor = Executors.newFixedThreadPool(numWorkers);
    List<TransactionWorker> workers = new ArrayList<>();

    for (int i = 0; i < numWorkers; i++) {
        TransactionWorker worker = new TransactionWorker(queue, i);
        workers.add(worker);
        executor.submit(worker);
    }

    try (BufferedReader reader = new BufferedReader(
            new InputStreamReader(
                    new GZIPInputStream(new FileInputStream("transactions.gz"))))) {
        String line;
        while ((line = reader.readLine()) != null) {
            queue.put(line);
        }
        for (int i = 0; i < numWorkers; i++) {
            queue.put("__EOF__");
        }
    }

    executor.shutdown();
    executor.awaitTermination(1, TimeUnit.HOURS);

    Map<String, Integer> finalCounts = new HashMap<>();
    for (TransactionWorker worker : workers) {
        for (Map.Entry<String, Integer> entry : worker.getResult().entrySet()) {
            finalCounts.merge(entry.getKey(), entry.getValue(), Integer::sum);
        }
    }

    try (BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt"))) {
        for (Map.Entry<String, Integer> entry : finalCounts.entrySet()) {
            writer.write(entry.getKey() + "," + entry.getValue());
            writer.newLine();
        }
    }
}

}

